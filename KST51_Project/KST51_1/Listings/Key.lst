C51 COMPILER V9.60.7.0   KEY                                                               09/26/2023 01:17:41 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\Objects\Key.obj
COMPILER INVOKED BY: E:\keil1\C51\BIN\C51.EXE APP\Key.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\USER;.\APP) DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\Key.lst) TABS(2) OBJECT(.\Objects\Key.obj)

line level    source

   1          #include "AllHead.h"
   2          
   3          u8 code KeyCodeMap[4][4] = { //矩阵按键编号到标准键盘键码的映射表
   4                      { 0x31, 0x32, 0x33, 0x26 }, //数字键 1、数字键 2、数字键 3、向上键
   5                      { 0x34, 0x35, 0x36, 0x25 }, //数字键 4、数字键 5、数字键 6、向左键
   6                      { 0x37, 0x38, 0x39, 0x28 }, //数字键 7、数字键 8、数字键 9、向下键
   7                      { 0x30, 0x1B, 0x0D, 0x27 } //数字键 0、ESC 键、 回车键、 向右键
   8                      };
   9          u8 key_sate[4][4] = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}}; //全部矩阵按键的当前状态
  10          
  11          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
  12          void Key_Driver()
  13          {
  14   1        u8 i,j;
  15   1        static u8 backup[4][4] = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}}; //按键值备份，保存前一次的值
  16   1        for(i = 0;i < 4;i++) //循环检测 4*4 的矩阵按键
  17   1        {
  18   2          for(j = 0;j < 4;j++)
  19   2          {
  20   3            if(backup[i][j] != key_sate[i][j]) //检测按键动作
  21   3            {
  22   4              if(backup[i][j] != 0)           //按键按下时执行动作
  23   4              {
  24   5                Key_Action(KeyCodeMap[i][j]); //调用按键动作函数
  25   5              }
  26   4              backup[i][j] = key_sate[i][j]; //刷新前一次的备份
  27   4            }
  28   3          }
  29   2        }
  30   1      }
  31          
  32          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
  33          void Key_Action(u8 keycode)
  34          {
  35   1        static char oprt = 0;    //用于保存加减运算符
  36   1        static long result = 0;  //用于保存运算结果
  37   1        static long addend = 0;  //用于保存输入的加数
  38   1        
  39   1        if ((keycode >= 0x30) && (keycode <= 0x39)) //输入 0-9 的数字
  40   1        {
  41   2          addend = (addend * 10) + (keycode - 0x30);  //整体十进制左移，新数字进入个位
  42   2          SMG_Show(addend); //运算结果显示到数码管
  43   2        }
  44   1        else if (0x26 == keycode) //向上键用作加号，执行加法或连加运算
  45   1        {
  46   2          oprt = 0;        //设置运算符变量
  47   2          result = addend; //运算数存到结果中，准备进行加减
  48   2          addend = 0;      //清零运算数，准备接收下一个运算数
  49   2          SMG_Show(addend);//刷新数码管显示
  50   2        }
  51   1        else if(0x28 == keycode) //向下键用作减号
  52   1        {
  53   2          oprt = 1;              //设置运算符变量
  54   2          result = addend;       //运算数存到结果中，准备进行加减
C51 COMPILER V9.60.7.0   KEY                                                               09/26/2023 01:17:41 PAGE 2   

  55   2          addend = 0;            //清零运算数，准备接收下一个运算数
  56   2          SMG_Show(addend);      //刷新数码管显示
  57   2        }
  58   1        else if (0x0D == keycode)  //回车键，执行加减运算
  59   1        {
  60   2          if(0 == oprt)
  61   2          {
  62   3            result += addend; //进行加法运算
  63   3          }
  64   2          else
  65   2          {
  66   3            result -= addend; //进行减法运算
  67   3          }
  68   2          addend = 0;
  69   2          SMG_Show(result);   //运算结果显示到数码管
  70   2        }
  71   1        else if (0x1B == keycode) //Esc 键，清零结果
  72   1        {
  73   2          addend = 0;
  74   2          result = 0;
  75   2          SMG_Show(addend); //运算结果显示到数码管
  76   2        }
  77   1      }
  78          
  79          /* 按键扫描函数，需在定时中断中调用，推荐调用间隔 1ms */
  80          void Key_Scan()
  81          {
  82   1        u8 i = 0;
  83   1        static u8 KeyOut = 0; //矩阵按键扫描输出索引
  84   1        static u8 keybuf[4][4] = {{0xFF,0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF,0xFF},
  85   1                                  {0xFF,0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF,0xFF}}; //矩阵按键扫描缓冲区
  86   1        //将一行的 4 个按键值移入缓冲区
  87   1        keybuf[KeyOut][0] = (keybuf[KeyOut][0] << 1) | KeyIn1;
  88   1        keybuf[KeyOut][1] = (keybuf[KeyOut][1] << 1) | KeyIn2;
  89   1        keybuf[KeyOut][2] = (keybuf[KeyOut][2] << 1) | KeyIn3;
  90   1        keybuf[KeyOut][3] = (keybuf[KeyOut][3] << 1) | KeyIn4;
  91   1        //消抖后更新按键状态                            
  92   1        for (i = 0; i < 4; i++) //每行 4 个按键，所以循环 4 次
  93   1        {
  94   2          if (0x00 == (keybuf[KeyOut][i] & 0x0F))
  95   2          { //连续 4 次扫描值为 0，即 4*4ms 内都是按下状态时，可认为按键已稳定的按下
  96   3            key_sate[KeyOut][i] = 0;
  97   3          }
  98   2          else if (0x0F == (keybuf[KeyOut][i] & 0x0F))
  99   2          { //连续 4 次扫描值为 1，即 4*4ms 内都是弹起状态时，可认为按键已稳定的弹起
 100   3            key_sate[KeyOut][i] = 1;
 101   3          }
 102   2        }
 103   1        //执行下一次的扫描输出
 104   1        KeyOut++; //输出索引递增
 105   1        if (KeyOut >= 4)
 106   1        {
 107   2          KeyOut = 0;
 108   2        }
 109   1      //  KeyOut = KeyOut & 0x03; //索引值加到 4 即归零
 110   1        
 111   1        switch(KeyOut) //根据索引，释放当前输出引脚，拉低下次的输出引脚
 112   1        {
 113   2          case 0: KeyOut4 = 1;KeyOut1 = 0;break;
 114   2          case 1: KeyOut1 = 1;KeyOut2 = 0;break;
 115   2          case 2: KeyOut2 = 1;KeyOut3 = 0;break;
 116   2          case 3: KeyOut3 = 1;KeyOut4 = 0;break;
C51 COMPILER V9.60.7.0   KEY                                                               09/26/2023 01:17:41 PAGE 3   

 117   2          default:break;
 118   2        }
 119   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    605    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     58       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
