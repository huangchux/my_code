C51 COMPILER V9.60.7.0   KEY                                                               09/28/2023 12:36:57 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\Objects\KEY.obj
COMPILER INVOKED BY: E:\keil1\C51\BIN\C51.EXE APP\KEY.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\APP) DEBUG OBJECTEXTEND PRINT(
                    -.\Listings\KEY.lst) TABS(2) OBJECT(.\Objects\KEY.obj)

line level    source

   1          #include <reg52.h>
   2          #include "KEY.h"
   3          
   4          u8 Key_State[4][4] = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}}; //全部矩阵按键的当前状态
   5          u8 KeyDown_State; //按下状态
   6            
   7          /*============================按键驱动============================*/
   8          //按键驱动函数，检测按键动作，调度相应动作函数
   9          void Key_Driver()
  10          {
  11   1        static u8 i,j;
  12   1        static u8 backup[4][4] = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}}; //按键值备份，保存前一次的值
  13   1        for(i = 0; i < 4; i++) //循环检测 4*4 的矩阵按键
  14   1        {
  15   2          for(j = 0; j < 4; j++)
  16   2          {
  17   3            if(Key_State[i][j] != backup[i][j]) //当前值与前次值不相等说明此时按键有动作
  18   3            {
  19   4              if(backup[i][j] != 0) //前次值不等于0，则当前值等于0，按键按下
  20   4              {
  21   5                Key_Test(); //调用按键检测函数
  22   5              }
  23   4              backup[i][j] = Key_State[i][j]; //更新前一次的备份值
  24   4            }
  25   3          }
  26   2        }
  27   1      }
  28          
  29          /*============================按键检测============================*/
  30          void Key_Test() //按键检测函数
  31          {
  32   1        if(0 == KeyIn1)      //如果按键1按下
  33   1        {
  34   2          KeyDown_State = 1; //按下状态为1
  35   2        }
  36   1        else if(0 == KeyIn2) //如果按键2按下
  37   1        {
  38   2          KeyDown_State = 2; //按下状态为2
  39   2        }
  40   1        else if(0 == KeyIn3) //如果按键3按下
  41   1        {
  42   2          KeyDown_State = 3; //按下状态为3
  43   2        }
  44   1        else if(0 == KeyIn4) //如果按键4按下
  45   1        {
  46   2          KeyDown_State = 4; //按下状态为4
  47   2        }
  48   1      }
  49          
  50          /*============================按键处理函数============================*/
  51          void Key_Handler()
  52          {
  53   1        if(1 == KeyDown_State)       //如果按键按下状态为1，则表示按键1按下
  54   1        {
C51 COMPILER V9.60.7.0   KEY                                                               09/28/2023 12:36:57 PAGE 2   

  55   2          KeyDown_State = 0;         //按键状态清0
  56   2          LED2 = !LED2;              //LED2状态翻转
  57   2        }
  58   1        else if(2 == KeyDown_State)  //如果按键按下状态为2，则表示按键2按下
  59   1        {
  60   2          KeyDown_State = 0;         //按键状态清0
  61   2          LED3 = !LED3;              //LED3状态翻转
  62   2        }
  63   1        else if(3 == KeyDown_State)  //如果按键按下状态为3，则表示按键3按下
  64   1        {
  65   2          KeyDown_State = 0;         //按键状态清0
  66   2          LED4 = !LED4;              //LED4状态翻转
  67   2        }
  68   1        else if(4 == KeyDown_State)  //如果按键按下状态为4，则表示按键4按下
  69   1        {
  70   2          KeyDown_State = 0;         //按键状态清0
  71   2          LED5 = !LED5;              //LED4状态翻转
  72   2        }
  73   1      }
  74          
  75          /* 按键扫描函数，需在定时中断中调用*/
  76          void Key_Scan()
  77          {
  78   1        static u8 i = 0;
  79   1        static u8 KeyOut = 0; //矩阵按键扫描输出索引
  80   1        static u8 keybuf[4][4] = {{0xFF, 0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF},
  81   1                                  {0xFF, 0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF}
  82   1                                 }; //矩阵按键扫描缓冲区
  83   1        keybuf[KeyOut][0] = (keybuf[KeyOut][0] << 1) | KeyIn1; //缓冲区左移一位，并将当前扫描值移入最低位
  84   1        keybuf[KeyOut][1] = (keybuf[KeyOut][1] << 1) | KeyIn2; //1111 1111 << 1 --> 1111 1110 | KeyIn1 --> 1111 1
             -111
  85   1        keybuf[KeyOut][2] = (keybuf[KeyOut][2] << 1) | KeyIn3;
  86   1        keybuf[KeyOut][3] = (keybuf[KeyOut][3] << 1) | KeyIn4;
  87   1        //消抖后更新按键状态
  88   1        for(i = 0; i < 4; i++) //每行 4 个按键，所以循环 4 次
  89   1        {
  90   2          if(0x00 == (keybuf[KeyOut][i] & 0x0F)) //由于只需要判断最后四位，所以要 & 上0x0F
  91   2          {
  92   3            //连续 4 次扫描值为 0，即 4*4ms 内都是按下状态时，可认为按键已稳定的按下
  93   3            Key_State[KeyOut][i] = 0;
  94   3          }
  95   2          else if(0x0F == (keybuf[KeyOut][i] & 0x0F))
  96   2          {
  97   3            //连续 4 次扫描值为 1，即 4*4ms 内都是弹起状态时，可认为按键已稳定的弹起
  98   3            Key_State[KeyOut][i] = 1;
  99   3          }
 100   2        }
 101   1        KeyOut1 = 0; //由于这里只需要第一行的四个按键，所以只需要KeyOut1 = 0就好
 102   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    338    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     53    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
