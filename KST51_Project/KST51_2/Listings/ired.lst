C51 COMPILER V9.60.7.0   IRED                                                              10/24/2023 16:02:05 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE IRED
OBJECT MODULE PLACED IN .\Objects\ired.obj
COMPILER INVOKED BY: E:\keil1\C51\BIN\C51.EXE APP\ired.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\APP;.\USER) DEBUG OBJECTEXTEN
                    -D PRINT(.\Listings\ired.lst) TABS(2) OBJECT(.\Objects\ired.obj)

line level    source

   1          //#include "AllHead.h"
   2          
   3          //u8 gired_data[4];
   4          
   5          ///*******************************************************************************
   6          //* 函 数 名         : ired_init
   7          //* 函数功能       : 红外端口初始化函数，外部中断0配置
   8          //* 输    入         : 无
   9          //* 输    出         : 无
  10          //*******************************************************************************/
  11          //void Ired_Init(void)
  12          //{
  13          //  IRD = 1;       //确保红外接收引脚被释放
  14          //  TMOD &= 0x0F;  //清零 T1 的控制位
  15          //  TMOD |= 0x10;  //配置 T1 为模式 1
  16          //  IT1 = 1;       //设置 INT1 为下降沿触发
  17          //  EA = 1;        //开启总中断
  18          //  EX1 = 1;       //使能 INT1 中断
  19          //}
  20          
  21          //void ired() interrupt 2  //外部中断1服务函数
  22          //{
  23          //  u16 time_cnt = 0;
  24          //  u8 i,j;
  25          //  u8 ired_high_time = 0;
  26          //  
  27          //  if(0 == IRD)
  28          //  {
  29          //    time_cnt = 1000;
  30          //    while((!IRD) && (time_cnt)) //等待引导信号9ms低电平结束，若超过10ms强制退出,若高电平则跳出循环
  31          //    {
  32          //      Delay_10us(1);  //延时约10us 10us*1000 = 10000us --> 10ms
  33          //      time_cnt--;
  34          //      if(0 == time_cnt)
  35          //      {
  36          //        return;
  37          //      }
  38          //    }
  39          //    if(IRD)  //引导信号9ms低电平已过，进入4.5ms高电平
  40          //    {
  41          //      time_cnt = 500;
  42          //      while((IRD) && (time_cnt)) //等待引导信号4.5ms高电平结束，若超过5ms强制退出
  43          //      {
  44          //        Delay_10us(1); //延时约10us 10us*500 = 5000us --> 5ms
  45          //        time_cnt--;
  46          //        if(0 == time_cnt) return;
  47          //      }
  48          //      for(i = 0; i < 4; i++) //循环4次，读取4个字节数据(地址码、地址反码、控制码、控制反码)
  49          //      {
  50          //        for(j = 0; j < 8; j++) //循环8次读取每位数据即一个字节
  51          //        {
  52          //          time_cnt = 600;
  53          //          while((!IRD) && (time_cnt)) //等待数据1或0前面的0.56ms结束，若超过6ms强制退出
  54          //          {
C51 COMPILER V9.60.7.0   IRED                                                              10/24/2023 16:02:05 PAGE 2   

  55          //            Delay_10us(1); //延时约10us 10us*600 = 6000us --> 6ms
  56          //            time_cnt--;
  57          //            if(0 == time_cnt) return;
  58          //          }
  59          //          while(IRD) //等待数据1或0后面的高电平结束，若超过2ms强制退出
  60          //          {
  61          //            Delay_10us(10);  //约0.1ms 100us*20 == 2000us --> 2ms
  62          //            ired_high_time++;
  63          //            if(ired_high_time > 20) return;
  64          //          }
  65          //          gired_data[i] >>= 1;     //数据是先传低位再传高位，所以接收到的低位数据需要往右移一位
  66          //          if(ired_high_time >= 8)  //如果高电平时间大于0.8ms，数据则为1，否则为0
  67          //            gired_data[i] |= 0x80; //如果高电平时间大于0.8ms则接收到的数据为1，或上0x80相当于取出最高位的数据 
  68          //                                   //接着向右移动一位
  69          //          ired_high_time = 0;      //重新清零，等待下一次计算时间
  70          //        }
  71          //      }
  72          //    }
  73          //    if(gired_data[2] != ~gired_data[3]) //校验控制码与反码，错误则返回
  74          //    {
  75          //      for(i = 0; i < 4; i++)
  76          //        gired_data[i] = 0; //接收到的数据清0
  77          //      return;
  78          //    }
  79          //  }
  80          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
