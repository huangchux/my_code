C51 COMPILER V9.60.7.0   MAIN                                                              11/18/2023 19:52:36 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\keil1\C51\BIN\C51.EXE USER\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Listings) DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          #include <stdio.h>
   3          #include <string.h>
   4          
   5          //对系统默认数据类型进行重命名
   6          typedef unsigned char u8;
   7          typedef unsigned int u16;
   8          typedef unsigned long u32;
   9          
  10          //定义KEY引脚
  11          sbit KeyIn1 = P2^4;
  12          sbit KeyIn2 = P2^5;
  13          sbit KeyIn3 = P2^6;
  14          sbit KeyIn4 = P2^7;
  15          sbit KeyOut1 = P2^3;
  16          sbit KeyOut2 = P2^2;
  17          sbit KeyOut3 = P2^1;
  18          sbit KeyOut4 = P2^0;
  19          
  20          //定义LCD1602引脚
  21          #define LCD1602_DB  P0
  22          sbit LCD1602_RS = P1^0;
  23          sbit LCD1602_RW = P1^1;
  24          sbit LCD1602_E = P1^5;
  25          
  26          //定义TIM变量
  27          u8 T0RH = 0;  //T0 重载值的高字节
  28          u8 T0RL = 0;  //T0 重载值的低字节
  29          
  30          //定义KEY变量
  31          u8 code KeyCodeMap[4][4] =   //矩阵按键编号到标准键盘键码的映射表
  32          {
  33              { '1', '2', '3', 0x26 }, //数字键 1、数字键 2、数字键 3、向上键
  34              { '4', '5', '6', 0x25 }, //数字键 4、数字键 5、数字键 6、向左键
  35              { '7', '8', '9', 0x28 }, //数字键 7、数字键 8、数字键 9、向下键
  36              { '0', 0x1B, 0x0D, 0x27 } //数字键 0、ESC 键、 回车键、 向右键
  37          };
  38          
  39          u8 pdata Key_state[4][4] = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}}; //按键当前状态
  40          u16 Number = 0;
  41          
  42          /***************************************** 函数声明区 *****************************************/
  43          void Time0_Init(u16 ms);
  44          void LCD_WaitReady();
  45          void LCD_WriteCmd(u8 cmd);
  46          void LCD_WriteDat(u8 dat);
  47          void LCD_SetCursor(u8 x,u8 y);
  48          void LCD_Showstr(u8 x,u8 y,u8 *str);
  49          void LCD_Init();
  50          void Key_scan();
  51          void Key_driver();
  52          void Key_Action(u8 keycode);
  53          u8 LongToString(u8 *str,u32 dat);
  54          void LCD_AreaClear(u8 x,u8 y, u8 len);
C51 COMPILER V9.60.7.0   MAIN                                                              11/18/2023 19:52:36 PAGE 2   

  55          
  56          /***************************************** 主函数 *****************************************/
  57          
  58          void main()
  59          {
  60   1        Time0_Init(1);  //配置 T0 定时 1ms
  61   1        EA = 1;         //开总中断
  62   1        LCD_Init();     //初始化液晶
  63   1        while(1)
  64   1        {
  65   2          Key_driver();  //调用按键驱动
  66   2        }
  67   1      }
  68          
  69          /* T0 中断服务函数，执行按键扫描 */
  70          void Time0() interrupt 1
  71          {
  72   1        TH0 = T0RH; //重新加载重载值
  73   1        TL0 = T0RL;
  74   1        Key_scan(); //按键扫描函数
  75   1      }
  76          
  77          /***************************************** TIM *****************************************/
  78          
  79          /* 配置并启动T0，ms-T0定时时间 */
  80          void Time0_Init(u16 ms)
  81          {
  82   1        u32 temp = 0;                        //临时变量
  83   1        temp = 11059200 / 12;                //定时器计数频率
  84   1        temp = (temp * ms) / 1000;           //计算所需的计数值
  85   1        temp = 65536 - temp;                 //计算定时器重载值
  86   1        temp += 18;                          //补偿中断响应延时造成的误差
  87   1        T0RH = (unsigned char)(temp >> 8);   //定时器重载值拆分为高低字节
  88   1        T0RL = (unsigned char)temp;
  89   1        TMOD &= 0xF0;   //清零T0的控制位
  90   1        TMOD |= 0x01;   //配置T0为模式1
  91   1        TH0 = T0RH;     //加载T0重载值
  92   1        TL0 = T0RL;
  93   1        ET0 = 1;        //使能T0中断
  94   1        TR0 = 1;        //启动T0
  95   1      }
  96          
  97          /***************************************** LCD1602 *****************************************/
  98          
  99          /* 等待液晶准备好 */
 100          void LCD_WaitReady()    //读状态：RS = L，R/W = H，E = H
 101          {
 102   1        u8 sta = 0;           //定义一个状态变量
 103   1        LCD1602_DB = 0xFF;
 104   1        LCD1602_RS = 0;
 105   1        LCD1602_RW = 1;
 106   1        do  //do while语句是先执行一次语句，再对循环条件进行判断
 107   1        {
 108   2          LCD1602_E = 1;     //使能
 109   2          sta = LCD1602_DB;  //读取状态字
 110   2          LCD1602_E = 0;     //读完撤销使能，防止液晶输出数据干扰 P0 总线
 111   2        }while(sta & 0x80);  //最高位等于 1 表示液晶正忙，重复检测直到其等于 0 为止
 112   1      }
 113          
 114          /* 向 LCD1602 液晶写入一字节命令，cmd-待写入命令值 */
 115          void LCD_WriteCmd(u8 cmd) //写指令：RS = L，R/W = L，D0~D7 = 指令码，E = 高脉冲
 116          {
C51 COMPILER V9.60.7.0   MAIN                                                              11/18/2023 19:52:36 PAGE 3   

 117   1        LCD_WaitReady();
 118   1        LCD1602_RS = 0;
 119   1        LCD1602_RW = 0;
 120   1        LCD1602_DB = cmd;
 121   1        LCD1602_E = 1;
 122   1        LCD1602_E = 0;
 123   1      }
 124          
 125          /* 向 LCD1602 液晶写入一字节数据，dat-待写入数据值 */
 126          void LCD_WriteDat(u8 dat)  //写数据：RS = H，R/W = L，D0~D7 = 数据，E = 高脉冲
 127          {
 128   1        LCD_WaitReady();
 129   1        LCD1602_RS = 1;
 130   1        LCD1602_RW = 0;
 131   1        LCD1602_DB = dat;
 132   1        LCD1602_E = 1;
 133   1        LCD1602_E = 0;
 134   1      }
 135          
 136          /* 设置显示 RAM 起始地址，亦即光标位置，(x,y)-对应屏幕上的字符坐标 */
 137          void LCD_SetCursor(u8 x,u8 y)
 138          {
 139   1        u8 addr;
 140   1        if(0 == y)           //由输入的屏幕坐标计算显示RAM的地址
 141   1        {
 142   2          addr = 0x00 + x;   //第一行字符地址从0x00起始
 143   2        }
 144   1        else
 145   1        {
 146   2          addr = 0x40 + x;   //第二行字符地址从0x40起始
 147   2        }
 148   1        LCD_WriteCmd(addr | 0x80); //设置RAM地址
 149   1      }
 150          
 151          /* 在液晶上显示字符串，(x,y)-对应屏幕上的起始坐标，str-字符串指针，len-需显示的字符长度 */
 152          void LCD_Showstr(u8 x,u8 y,u8 *str)
 153          {
 154   1        LCD_SetCursor(x,y);   //设置起始地址
 155   1        while(*str != '\0')
 156   1        {
 157   2          LCD_WriteDat(*str++);  //先取str指向的数据然后进入写数据函数，然后str自加1,优先级一样从右往左
 158   2        }
 159   1      }
 160          
 161          /* 初始化 1602 液晶 */
 162          void LCD_Init()
 163          {
 164   1        LCD_WriteCmd(0x38);  //16*2显示，5*7点阵，8位数据接口
 165   1        LCD_WriteCmd(0x0C);  //显示器开，光标关闭，闪烁关闭 0000 1100
 166   1        LCD_WriteCmd(0x06);  //文字不动，地址自动+1 0000 0110
 167   1        LCD_WriteCmd(0x01);  //清屏
 168   1      }
 169          
 170          /* 长整型数转换为字符串，str-字符串指针，dat-待转换数，返回值-字符串长度 */
 171          u8 LongToString(u8 *str,u32 dat)
 172          {
 173   1        signed char i = 0;
 174   1        u8 len = 0;
 175   1        u8 buf[12];
 176   1        do
 177   1        {
 178   2          buf[i++] = dat % 10;  //先转换为低位在前的十进制数组
C51 COMPILER V9.60.7.0   MAIN                                                              11/18/2023 19:52:36 PAGE 4   

 179   2          dat /= 10;
 180   2        }while(dat > 0);
 181   1        len += i;         //i 最后的值就是有效字符的个数
 182   1        while(i-- > 0)    //将数组值转换为 ASCII 码反向拷贝到接收指针上
 183   1        {
 184   2          *str++ = buf[i] + '0';
 185   2        }
 186   1        *str = '\0';  //添加字符串结束符
 187   1        return len;   //返回字符串长度
 188   1      }
 189          
 190          /* 区域清除，清除从(x,y)坐标起始的 len 个字符位 */
 191          void LCD_AreaClear(u8 x,u8 y, u8 len)
 192          {
 193   1        LCD_SetCursor(x,y);  //设置起始地址
 194   1        while(len--)         //连续写入空格
 195   1        {
 196   2          LCD_WriteDat(' ');
 197   2        }
 198   1      }
 199          
 200          
 201          /***************************************** KEY *****************************************/
 202          
 203          /* 按键扫描函数，需在定时中断中调用 */
 204          void Key_scan()
 205          {
 206   1        u8 i = 0;
 207   1        static u8 KeyOut = 0;  //矩阵按键扫描输出索引
 208   1        static u8 Keybuf[4][4] = {{0xFF,0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF,0xFF},
 209   1        {0xFF,0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF,0xFF}};  //矩阵按键扫描缓冲区
 210   1        
 211   1        //将一行的 4 个按键值移入缓冲区
 212   1        Keybuf[KeyOut][0] = (Keybuf[KeyOut][0] << 1) | KeyIn1;
 213   1        Keybuf[KeyOut][1] = (Keybuf[KeyOut][1] << 1) | KeyIn2;
 214   1        Keybuf[KeyOut][2] = (Keybuf[KeyOut][2] << 1) | KeyIn3;
 215   1        Keybuf[KeyOut][3] = (Keybuf[KeyOut][3] << 1) | KeyIn4;
 216   1        //消抖后更新按键状态
 217   1        for(i = 0; i < 4; i++)  //每行 4 个按键，所以循环 4 次
 218   1        {
 219   2          if(0x00 == (Keybuf[KeyOut][i] & 0x0F))
 220   2          {
 221   3            //连续 4 次扫描值为 0，即 4*4ms 内都是按下状态时，可认为按键已稳定的按下
 222   3            Key_state[KeyOut][i] = 0;
 223   3          }
 224   2          else if(0x0F == (Keybuf[KeyOut][i] & 0x0F))
 225   2          {
 226   3            //连续 4 次扫描值为 1，即 4*4ms 内都是弹起状态时，可认为按键已稳定的弹起
 227   3            Key_state[KeyOut][i] = 1;
 228   3          }
 229   2        }
 230   1        //执行下一次的扫描输出
 231   1        KeyOut++;  //输出索引递增
 232   1        KeyOut = KeyOut & 0x03;
 233   1        switch(KeyOut)  //根据索引，释放当前输出引脚，拉低下次的输出引脚
 234   1        {
 235   2          case 0:KeyOut4 = 1;KeyOut1 = 0;break;
 236   2          case 1:KeyOut1 = 1;KeyOut2 = 0;break;
 237   2          case 2:KeyOut2 = 1;KeyOut3 = 0;break;
 238   2          case 3:KeyOut3 = 1;KeyOut4 = 0;break;
 239   2        }
 240   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              11/18/2023 19:52:36 PAGE 5   

 241          
 242          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
 243          void Key_driver()
 244          {
 245   1        u8 i,j;
 246   1        static u8 backup[4][4] = {{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}}; //按键值备份，保存前一次的值
 247   1        for(i = 0; i < 4; i++)  //循环扫描 4*4 的矩阵按键
 248   1        {
 249   2          for(j = 0; j < 4; j++)
 250   2          {
 251   3            if(backup[i][j] != Key_state[i][j]) //当前值与前次值不相等说明此时按键有动作
 252   3            {
 253   4              if(backup[i][j] != 0)  //前次值不等于0，则当前值等于0，按键按下
 254   4              {
 255   5                Key_Action(KeyCodeMap[i][j]);
 256   5              }
 257   4              backup[i][j] = Key_state[i][j]; //更新前一次的备份值
 258   4            }
 259   3          }
 260   2        }
 261   1      }
 262          
 263          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 264          void Key_Action(u8 keycode)  //按键动作函数，根据键码执行相应动作
 265          {
 266   1        u8 str[20];
 267   1        u8 len = 0;
 268   1        if((keycode >= '0') && (keycode <= '9'))  //输入0~9
 269   1        {
 270   2          len = LongToString(str,keycode - '0'); //操作数转换为字符串 keycode - '0'表示转换为整数
 271   2          LCD_AreaClear(0,0,16 - len);     //清除第一行字符串右边的字符位
 272   2          LCD_Showstr(0,0,str); 
 273   2        }
 274   1        if(0x26 == keycode)  //向上键
 275   1        {
 276   2          len = strlen("UP");              // 计算字符串长度
 277   2          LCD_AreaClear(0,0,16 - len);     //清除第一行字符串右边的字符位
 278   2          LCD_Showstr(0,0,"UP");
 279   2        }
 280   1        else if(0x28 == keycode) //向下键
 281   1        {
 282   2          len = strlen("DOWN");
 283   2          LCD_AreaClear(0,0,16 - len);     //清除第一行字符串右边的字符位
 284   2          LCD_Showstr(0,0,"DOWN");
 285   2        } 
 286   1        else if(0x25 == keycode) //向左键
 287   1        {
 288   2          len = strlen("LEFT");
 289   2          LCD_AreaClear(0,0,16 - len);     //清除第一行字符串右边的字符位
 290   2          LCD_Showstr(0,0,"LEFT");
 291   2          
 292   2        } 
 293   1        else if(0x27 == keycode) //向右键
 294   1        {
 295   2          len = strlen("RIGHT");
 296   2          LCD_AreaClear(0,0,16 - len);     //清除第一行字符串右边的字符位
 297   2          LCD_Showstr(0,0,"RIGHT");
 298   2        } 
 299   1        else if(0x0D == keycode) //回车键
 300   1        {
 301   2          len = strlen("ENTER");
 302   2          LCD_AreaClear(0,0,16 - len);     //清除第一行字符串右边的字符位
C51 COMPILER V9.60.7.0   MAIN                                                              11/18/2023 19:52:36 PAGE 6   

 303   2          LCD_Showstr(0,0,"ENTER");
 304   2        } 
 305   1        else if(0x1B == keycode)  //Esc键
 306   1        {
 307   2          len = strlen("ESC");
 308   2          LCD_AreaClear(0,0,16 - len);     //清除第一行字符串右边的字符位
 309   2          LCD_Showstr(0,0,"ESC");
 310   2        }
 311   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1061    ----
   CONSTANT SIZE    =     45    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     16    ----
   DATA SIZE        =     37      52
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
